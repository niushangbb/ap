{
  // JSHint Default Configuration File (as on JSHint website)
  // See http://jshint.com/docs/ for more details

  "maxerr"        : 50,       // {int} Maximum error before stopping

  // Enforcing
  "bitwise"       : false,     // false: allow bitwise operators (&, |, ^, etc.)
  "camelcase"     : false,    // false: Allow identifiers to be not in camelCase
  "curly"         : false,     // false: do not force {} for every new block or scope
  "eqeqeq"        : false,     // false: Do not require triple equals (===) for comparison
  "forin"         : false,     // false: do not require filtering for..in loops with obj.hasOwnProperty()
  "freeze"        : true,     // true: prohibits overwriting prototypes of native objects such as Array, Date etc.
  "immed"         : false,    // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
  "indent"        : 4,        // {int} Number of spaces to use for indentation
  "latedef"       : "nofunc",    // true: Require variables/functions to be defined before being used
  "newcap"        : false,    // false: do not require capitalization of all constructor functions e.g. `new F()`
  "noarg"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`
  "noempty"       : false,     // false: Do not prohibit use of empty blocks
  "nonbsp"        : true,     // true: Prohibit "non-breaking whitespace" characters.
  "nocomma"        : false,     // true: Prohibits the use of the comma operator. When misused, the comma operator can obscure the value of a statement and promote incorrect code.
  "nonew"         : true,    // true: Prohibit use of constructors for side-effects (without assignment)
  "plusplus"      : false,    // true: Prohibit use of `++` & `--`
  "quotmark"      : false,    // Quotation mark consistency:
  //   false    : do nothing (default)
  //   true     : ensure whatever is used is consistent
  //   "single" : require single quotes
  //   "double" : require double quotes
  "undef"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)
  "unused"        : "vars",     // Unused variables:
  //   true     : all variables, last function parameter
  //   "vars"   : all variables only
  //   "strict" : all variables, all function parameters
  "strict"        : true,     // true: Requires all functions run in ES5 Strict Mode
  "maxparams"     : false,    // {int} Max number of formal params allowed per function
  "maxdepth"      : false,    // {int} Max depth of nested blocks (within functions)
  "maxstatements" : false,    // {int} Max number statements per function
  "maxcomplexity" : false,    // {int} Max cyclomatic complexity per function
  "maxlen"        : false,    // {int} Max number of characters per line

  // Relaxing
  "asi"           : true,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)
  "boss"          : false,     // true: Tolerate assignments where comparisons would be expected
  "debug"         : false,     // true: Allow debugger statements e.g. browser breakpoints.
  "eqnull"        : true,     // true: Tolerate use of `== null`
  "es5"           : false,     // true: Allow ES5 syntax (ex: getters and setters)
  "esnext"        : false,     // true: Allow ES.next (ES6) syntax (ex: `const`)
  "moz"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)
  // (ex: `for each`, multiple try/catch, function expressionâ€¦)
  "evil"          : false,     // true: Tolerate use of `eval` and `new Function()`
  "expr"          : false,     // true: Tolerate `ExpressionStatement` as Programs
  "funcscope"     : false,     // false: Tolerate defining variables inside control statements
  "globalstrict"  : false,     // false: Allow global "use strict" (also enables 'strict')
  "iterator"      : false,     // true: Tolerate using the `__iterator__` property
  "lastsemic"     : true,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block
  "laxbreak"      : true,     // true: Tolerate possibly unsafe line breakings
  "laxcomma"      : false,     // true: Tolerate comma-first style coding
  "loopfunc"      : false,     // true: Tolerate functions being defined in loops
  "multistr"      : false,     // true: Tolerate multi-line strings
  "noyield"       : false,     // true: Tolerate generator functions with no yield statement in them.
  "notypeof"      : true,     // true: Prohibit invalid typeof operator values
  "proto"         : false,     // false: Prohibit using the `__proto__` property
  "scripturl"     : false,     // true: Tolerate script-targeted URLs
  "shadow"        : true,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
  "sub"           : true,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation
  "supernew"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`
  "validthis"     : true,     // true: Tolerate using this in a non-constructor function

  // Environments
  "browser"       : true,     // Web Browser (window, document, etc)
  "browserify"    : false,    // Browserify (node.js code in the browser)
  "couch"         : false,    // CouchDB
  "devel"         : true,     // Development/debugging (alert, confirm, etc)
  "dojo"          : false,    // Dojo Toolkit
  "jasmine"       : false,    // Jasmine
  "jquery"        : true,    // jQuery
  "mocha"         : true,     // Mocha
  "mootools"      : false,    // MooTools
  "node"          : true,    // Node.js
  "nonstandard"   : false,    // Widely adopted globals (escape, unescape, etc)
  "phantom"       : false,    // PhantomJS
  "prototypejs"   : false,    // Prototype and Scriptaculous
  "qunit"         : false,    // QUnit
  "rhino"         : false,    // Rhino
  "shelljs"       : false,    // ShellJS
  "typed"         : false,    // Globals for typed array constructions
  "worker"        : false,    // Web Workers
  "wsh"           : false,    // Windows Scripting Host
  "yui"           : false,    // Yahoo User Interface

  // Custom Globals
  // additional predefined global variables
  //This option can be used to specify a white list of global variables that are not formally defined in the source code.
  //This is most useful when combined with the undef option in order to suppress warnings for project-specific global variables.
  //Setting an entry to true enables reading and writing to that variable.
  //Setting it to false will trigger JSHint to consider that variable read-only.
  "globals"       : {
    "edo":false,
    "GAJavaScript":false,
    "angular":false,
    "trace":false,
    "google":false,
    "chai":false
  }
}